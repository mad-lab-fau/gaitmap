[tool.poetry]
name = "gaitmap"
version = "2.2.3"
description = "The Gait and Movement Analysis Package - Your definite guide to reliable IMU based human movement analysis."
license = "MIT"
readme = "README.md"
homepage = "https://github.com/mad-lab-fau/gaitmap"
repository = "https://github.com/mad-lab-fau/gaitmap"
authors = [
    "Arne Küderle <arne.kuederle@fau.de>",
    "Martin Ullrich <martin.ullrich@fau.de>",
    "Nils Roth <nils.roth@fau.de>",
    "Malte Ollenschläger <Malte.Ollenschlaeger@fau.de>",
    "Alzhraa Ahmed <alzhraa.ahmed@fau.de>",
    "Moradi, Hamid <hamid.moradi@fau.de>",
    "Raul C. Sîmpetru <raul.simpetru@fau.de>",
    "Dominik Prossel <dominik.prossel@fau.de>",
    "Liv Herzer <liv.herzer@fau.de>",
    "Felix Kluge <felix.kluge@fau.de>"
]
packages = [
  { include = "gaitmap" },
]

[tool.poetry.dependencies]
python = ">=3.8.0,<4.0"
pandas = ">=2"
scipy = ">=1.6.1"
typing_extensions = ">=4.1.1"
numba =  [
    {version = ">=0.55"},
    {version = ">=0.55.2", markers = "sys_platform == 'darwin' and platform_machine == 'arm64'"}
]
numpy = ">=1.20"
joblib = ">=1.2.0"
scikit-learn = ">=1.0.1"
# We restrict it to 0.14.6 for now, as later versions don't seem to work on Linux
# This version of pomegranate does not support Python 3.10, unfortunately
pomegranate = {version = ">=0.14.2,<=0.14.6", python = "<3.10", optional = true}
tpcp = ">=0.15.0"
pingouin = {version = "^0.5.3", optional = true}

[tool.poetry.extras]
hmm = ["pomegranate"]
stats = ["pingouin"]
all = ["pomegranate", "pingouin"]

[tool.poetry.group.dev.dependencies]
poethepoet = "^0.18.1"
pytest = "^7.2.1"
pytest-cov = "^4.0.0"
black = "^22.12.0"
coverage = "^7.0.5"
ipykernel = "^6.20.2"
IPython = "^8.8.0"
ipympl = "^0.9.2"
memory_profiler = "^0.61.0"
toml = "^0.10.2"
gaitmap-mad = {path = "gaitmap_mad", develop = true}
sphinx-gallery = "^0.11.1"
pydata-sphinx-theme = "^0.13.0"
numpydoc = "^1.5.0"
Sphinx = "^6.1.3"
ruff = "^0.0.235"
myst-parser = "^1.0.0"

[tool.black]
line-length = 120
target-version = ['py38']
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | _debug_test
    | docs
    | build
    | dist
    | \.virtual_documents
  )/
)
'''

[tool.ruff]
line-length = 120
update-check = true
target-version = "py38"

select = [
    # pyflakes
    "F",
    # pycodestyle
    "E",
    "W",
    # mccabe
    "C90",
    # isort
    "I",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # pep8-naming
    "N",
    # flake8-blind-except
    "BLE",
    # flake8-2020
    "YTT",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-errmsg
    "EM",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-pytest-style
    "PT",
    # flake8-return
    "RET",
    # flake8-simplify
    "SIM",
    # flake8-unused-arguments
    "ARG",
    # pandas-vet
    "PD",
    # pygrep-hooks
    "PGH",
    # flake8-bugbear
    "B",
    # flake8-quotes
    "Q",
    # pylint
    "PL",
    # flake8-pie
    "PIE",
    # flake8-type-checking
    "TCH",
    # tryceratops
    "TRY",
    # flake8-use-pathlib
    "PTH",
    "RUF"
]

ignore = [
    # controversial
    "B006",
    # controversial
    "B008",
    "B010",
    # Magic constants
    "PLR2004",
    # Strings in error messages
    "EM101",
    "EM102",
    "EM103",
    # Multiline docstring summary
    "D213",
    # Varaibles before return
    "RET504",
    # Abstract raise into inner function
    "TRY301",
    # Use type-checking block
    "TCH001",
    "TCH002",
    "TCH003",
    # df as varaible name
    "PD901",
    # melt over stack
    "PD013"
]


exclude = [
    "doc/sphinxext/*.py",
    "doc/build/*.py",
    "doc/temp/*.py",
    ".eggs/*.py",
    "example_data",
    "examples"
]


[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.poe.tasks]
_format_black = "black ."
_format_ruff = "ruff . --fix-only"
format = { sequence = ["_format_black", "_format_ruff"], ignore_fail = true }
lint = { cmd = "ruff gaitmap gaitmap_mad --fix", help = "Lint all files with Prospector." }
_lint_ci = "ruff gaitmap gaitmap_mad --format=github"
_check_black = "black . --check"
ci_check = { sequence = ["_check_black", "_lint_ci"], help = "Check all potential format and linting issues." }
test = { cmd = "pytest --cov=gaitmap --cov=gaitmap_mad --cov-report=term-missing --cov-report=xml", help = "Run Pytest with coverage." }
docs = { "script" = "_tasks:task_docs()",  help = "Build the html docs using Sphinx." }
register_jupyter = { "script" = "_tasks:task_register_ipykernel()",  help = "Register the gaitmap environment as a Jupyter kernel for testing." }
version = { "script" = "_tasks:task_update_version()", help = "Bump version in all relevant places." }
bump_dev = { script = "_tasks:task_bump_all_dev()", help= "Update all dev dependencies to their @latest version."}

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

